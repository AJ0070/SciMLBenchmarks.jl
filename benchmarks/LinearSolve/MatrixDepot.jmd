---
title: Suite Sparse Matrix Jacobian Factorization Benchmarks
author: Jürgen Fuhrmann, Anastasia Dunca
---

```julia
using BenchmarkTools, Random, VectorizationBase
using LinearAlgebra, SparseArrays, LinearSolve, Sparspak
import Pardiso
using Plots
using MatrixDepot

BenchmarkTools.DEFAULT_PARAMETERS.seconds = 0.5

# Why do I need to set this ?
BenchmarkTools.DEFAULT_PARAMETERS.samples = 10

algs = [
    UMFPACKFactorization(),
    KLUFactorization(),
    MKLPardisoFactorize(),
    SparspakFactorization(),
]

__parameterless_type(T) = Base.typename(T).wrapper
parameterless_type(x) = __parameterless_type(typeof(x))
parameterless_type(::Type{T}) where {T} = __parameterless_type(T)
algnames = string.(Symbol.(parameterless_type.(algs)))

cols = [:red, :blue, :green, :magenta, :turqoise] # one color per alg

matrices = ["HB/1138_bus", "HB/494_bus", "HB/662_bus", "HB/685_bus", "HB/bcsstk01", "HB/bcsstk02", "HB/bcsstk03", "HB/bcsstk04", 
            "HB/bcsstk05", "HB/bcsstk06", "HB/bcsstk07", "HB/bcsstk08", "HB/bcsstk09", "HB/bcsstk10", "HB/bcsstk11", "HB/bcsstk12",
            "HB/bcsstk13", "HB/bcsstk14", "HB/bcsstk15", "HB/bcsstk16"]
                
res = [Float64[] for i in 1:length(algs)]
```

```julia
for z in 1:length(matrices)
    try
        rng = MersenneTwister(123)
        A = mdopen(matrices[z]).A
        A = convert(SparseMatrixCSC, A)
        n = size(A, 1)
        @info "dim=$(dim): $n × $n"
        b = rand(rng, n)
        u0 = rand(rng, n)

        for j in 1:length(algs)
            bt = @belapsed solve(prob, $(algs[j])).u setup=(prob = LinearProblem(copy($A),
                copy($b);
                u0 = copy($u0),
                alias_A = true,
                alias_b = true))
            push!(res[j], bt)
        end
        p = bar(algnames, res;
            ylabel = "Time/s",
            yscale = :log10,
            title = "Time for NxN  sparse LU Factorization of $(matrices[z])",
            legend = :outertopright)
        display(p)
    catch
        println("$(matrices[z]) failed to factorize.")
    end
end
```

```julia
algtimes = [[res[i][j] for i in 1:length(matrices)] for j in 1:length(algs)]
meantimes = mean.(algtimes)
p = bar(algnames, meantimes;
    ylabel = "Time/s",
    yscale = :log10,
    title = "Mean factorization time for NxN sparse LU Factorization of all Matrices",
    legend = :outertopright)
```

## Appendix

```julia, echo = false
using SciMLBenchmarks
SciMLBenchmarks.bench_footer(WEAVE_ARGS[:folder],WEAVE_ARGS[:file])
```
