---
title: Nonlinear Solver 23 Test Problems
author: Torkel Loman
---

These benchmarks compares the runtime and error for a range of nonlinear solvers. The problems are a standard set of problems as described [here](https://people.sc.fsu.edu/~jburkardt/m_src/test_nonlin/test_nonlin.html). The solvers are implemented in [NonlinearProblemLibrary.jl](https://github.com/SciML/DiffEqProblemLibrary.jl/blob/master/lib/NonlinearProblemLibrary/src/NonlinearProblemLibrary.jl), where you can find the problem function declarations. For each problem we test the following solvers:
- NonlinearSolve.jl's [Newton Raphson](https://docs.sciml.ai/NonlinearSolve/stable/api/nonlinearsolve/#NonlinearSolve.NewtonRaphson) method (`NewtonRaphson()`).
- NonlinearSolve.jl's [Newton trust region](https://docs.sciml.ai/NonlinearSolve/stable/api/nonlinearsolve/#NonlinearSolve.TrustRegion) method (`TrustRegion()`).
- NonlinearSolve.jl's Levenberg-Marquardt method (`LevenbergMarquardt()`).
- MINPACK's [Modified Powell](https://docs.sciml.ai/NonlinearSolve/stable/api/minpack/#NonlinearSolveMINPACK.CMINPACK) method (`CMINPACK(method=:hybr)`).
- MINPACK's [Levenberg-Marquardt](https://docs.sciml.ai/NonlinearSolve/stable/api/minpack/#NonlinearSolveMINPACK.CMINPACK) method (`CMINPACK(method=:lm)`).
- NLSolveJL's [Newton Raphson](https://docs.sciml.ai/NonlinearSolve/stable/api/nlsolve/#Solver-API) (`NLSolveJL(method=:newton)`).
- NLSolveJL's [Newton trust region](https://docs.sciml.ai/NonlinearSolve/stable/api/nlsolve/#Solver-API) (`NLSolveJL()`).
- NLSolveJL's [Anderson acceleration](https://docs.sciml.ai/NonlinearSolve/stable/api/nlsolve/#Solver-API) (`NLSolveJL(method=:anderson)`).
- Sundials's [Newton-Krylov](https://docs.sciml.ai/NonlinearSolve/stable/api/sundials/#Solver-API) method (`KINSOL()`).

Furthermore, for NonlinearSolve.jl's Newton Raphson method we try the following line search options (in addition to the default):
- `HagerZhang`
- `MoreThuente`
- `BackTracking`
- `Static`

and for NonlinearSolve.jl's Newton trust region we try the following radius update schemes (in addition to the default):
- `Simple` 
- `NLsolve` 
- `NocedalWright` 
- `Hei` 
- `Yuan` 
- `Bastin` 
- `Fan` 

# Setup
Fetch required packages.
```julia
using NonlinearSolve, NonlinearSolveMINPACK, SciMLNLSolve, SimpleNonlinearSolve, StaticArrays, Sundials
using BenchmarkTools, DiffEqDevTools, NonlinearProblemLibrary, Plots
RUP = RadiusUpdateSchemes
```
Declare the benchmarked solvers (and their names and plotting options).
```julia
solvers_all = [ 
    (type = :NR,      name = "Newton Raphson (No line search)",                    solver = Dict(:alg=>NewtonRaphson()),                                       color = :salmon1,         markershape = :star4),
    (type = :NR,      name = "Newton Raphson (Hager & Zhang line search)",         solver = Dict(:alg=>NewtonRaphson(linesearch=HagerZhang())),                 color = :tomato1,         markershape = :star5),
    (type = :NR,      name = "Newton Raphson (More & Thuente line search)",        solver = Dict(:alg=>NewtonRaphson(linesearch=MoreThuente())),                color = :red3,            markershape = :star6),
    (type = :NR,      name = "Newton Raphson (Nocedal & Wright line search)",      solver = Dict(:alg=>NewtonRaphson(linesearch=BackTracking())),               color = :firebrick,       markershape = :star7),
    (type = :NR,      name = "Newton Raphson (Static line search)",                solver = Dict(:alg=>NewtonRaphson(linesearch=Static())),                     color = :red4,            markershape = :star8),
    (type = :TR,      name = "Newton Trust Region",                                solver = Dict(:alg=>TrustRegion()),                                         color = :darkslategray1,  markershape = :circle),
    (type = :TR,      name = "Newton Trust Region (Simple radius update)",         solver = Dict(:alg=>TrustRegion(radius_update_scheme = RUP.Simple)),        color = :cadetblue3,      markershape = :vline),
    (type = :TR,      name = "Newton Trust Region (NLsolve radius update)",        solver = Dict(:alg=>TrustRegion(radius_update_scheme = RUP.NLsolve)),       color = :deepskyblue1,    markershape = :utriangle),
    (type = :TR,      name = "Newton Trust Region (Nocedal Wright radius update)", solver = Dict(:alg=>TrustRegion(radius_update_scheme = RUP.NocedalWright)), color = :cadetblue,       markershape = :rect),
    (type = :TR,      name = "Newton Trust Region (Hei radius update)",            solver = Dict(:alg=>TrustRegion(radius_update_scheme = RUP.Hei)),           color = :lightslateblue,  markershape = :pentagon),
    (type = :TR,      name = "Newton Trust Region (Yuan radius update)",           solver = Dict(:alg=>TrustRegion(radius_update_scheme = RUP.Yuan)),          color = :royalblue2,      markershape = :hexagon),
    (type = :TR,      name = "Newton Trust Region (Bastin radius update)",         solver = Dict(:alg=>TrustRegion(radius_update_scheme = RUP.Bastin)),        color = :blue1,           markershape = :heptagon),
    (type = :TR,      name = "Newton Trust Region (Fan radius update)",            solver = Dict(:alg=>TrustRegion(radius_update_scheme = RUP.Fan)),           color = :navy,            markershape = :octagon),
    (type = :general, name = "Levenberg-Marquardt",                                solver = Dict(:alg=>LevenbergMarquardt()),                                  color = :purple4,         markershape = :diamond),
    (type = :general, name = "Modified Powell (CMINPACK)",                         solver = Dict(:alg=>CMINPACK(method=:hybr)),                                color = :lightgoldenrod2, markershape = :+),
    (type = :general, name = "Levenberg-Marquardt (CMINPACK)",                     solver = Dict(:alg=>CMINPACK(method=:lm)),                                  color = :gold1,           markershape = :x),
    (type = :general, name = "Newton Raphson (NLSolveJL)",                         solver = Dict(:alg=>NLSolveJL(method=:newton)),                             color = :olivedrab1,      markershape = :dtriangle),
    (type = :general, name = "Newton Trust Region (NLSolveJL)",                    solver = Dict(:alg=>NLSolveJL()),                                           color = :green2,          markershape = :rtriangle),
    (type = :general, name = "Anderson acceleration (NLSolveJL)",                  solver = Dict(:alg=>NLSolveJL(method=:anderson)),                           color = :forestgreen,     markershape = :ltriangle)
];
```
Sets tolerances.
```julia
abstols = 1.0 ./ 10.0 .^ (4:12)
reltols = 1.0 ./ 10.0 .^ (4:12);
```
Set plotting defaults.
```julia
mm = Plots.Measures.mm
default(framestyle=:box,legend=:topleft,gridwidth=2, guidefontsize=12, legendfontsize=9, lw=2, ms=6, left_margin=6mm, bottom_margin=6mm, right_margin=2mm)
```
Prepares various helper functions for benchmarking a specific problem.
```julia
# Benchmarks a specific problem, checks which solvers can solve it and their performance
function benchmark_problem!(prob_name; solver_tracker=solver_tracker, selected_NR=nothing, selected_TR=nothing)
    # Finds the problem and the true solution.
    prob = nlprob_23_testcases[prob_name]
    true_sol = isnothing(prob.true_sol) ? solve(prob.prob, CMINPACK(method=:lm); abstol=1e-18, reltol=1e-18) : prob.true_sol

    # Finds the solvers that can solve the problem
    successful_solvers = filter(solver -> check_solver(prob, solver), solvers_all)
    push!(solver_tracker, prob_name => successful_solvers)

    # Creates separate solver vectors for the general, NR, and TR types.
    solvers_NR = filter(s -> s.type==:NR, successful_solvers)
    solvers_TR = filter(s -> s.type==:TR, successful_solvers)
    solvers_general = filter(s -> s.type==:general, successful_solvers)
    add_solver!(solvers_general, selected_NR, solvers_NR)
    add_solver!(solvers_general, selected_TR, solvers_TR)

    # Plots the wp diagrams
    wp_general = WorkPrecisionSet(prob.prob, abstols, reltols, getfield.(solvers_general, :solver); names=getfield.(solvers_general, :name), numruns=100, appxsol=true_sol, error_estimate=:l2, maxiters=10000000)
    wp_NR = WorkPrecisionSet(prob.prob, abstols, reltols, getfield.(solvers_NR, :solver); names=getfield.(solvers_NR, :name), numruns=100, appxsol=true_sol, error_estimate=:l2, maxiters=10000000)
    wp_TR = WorkPrecisionSet(prob.prob, abstols, reltols, getfield.(solvers_TR, :solver); names=getfield.(solvers_TR, :name), numruns=100, appxsol=true_sol, error_estimate=:l2, maxiters=10000000)

    wp_plot_general = plot_wp(wp_general, solvers_general)
    wp_plot_NR = plot_wp(wp_NR, solvers_NR; yguide="")
    wp_plot_TR = plot_wp(wp_TR, solvers_TR; yguide="")
    plot(wp_plot_general, wp_plot_NR, wp_plot_TR, layout=(1,3), size=(1700,400))
end

# Checks if a solver can sucessfully solve a given problem.
function check_solver(prob, solver)
    try
        true_sol = solve(prob.prob, solver.solver[:alg]; abstol=1e-18, reltol=1e-18, maxiters=10000000)
        if !SciMLBase.successful_retcode(true_sol.retcode)
            Base.printstyled("[Warn] Solver $(solver.name) returned retcode $(true_sol.retcode).\n"; color=:red)
            return false
        end
        WorkPrecisionSet(prob.prob, [1e-4, 1e-12], [1e-4, 1e-12], [solver.solver]; names=[solver.name], numruns=20, appxsol=true_sol, error_estimate=:l2, maxiters=10000000)
    catch e
        Base.printstyled("[Warn] Solver $(solver.name) threw an error: $e.\n"; color=:red)    
        return false
    end
    return true
end

# Adds an additional, selected, solver to the general solver set.
function add_solver!(solvers_general, selected_solver_name, additional_solver_set)
    isnothing(selected_solver_name) && return
    selected_solver = findfirst(s -> s.name==selected_solver_name, additional_solver_set)
    isnothing(selected_solver) && error("The $(selected_solver_name) was designated to be added to the general solver set, however, it seemed to fail on this problem.")
    push!(solvers_general, additional_solver_set[selected_solver])
end
```
Plotting related helper functions.
```julia
# Plots a work-precision diagram.
function plot_wp(wp, selected_solvers; kwargs...)
    color = reshape(getfield.(selected_solvers, :color),1,length(selected_solvers))
    markershape = reshape(getfield.(selected_solvers, :markershape),1,length(selected_solvers))
    xlimit, ylimit = xy_limits(wp)
    xticks = get_ticks(log10.(xlimit))
    yticks = get_ticks(log10.(ylimit))
    plot(wp; xlimit=xlimit, ylimit=ylimit, xticks=xticks, yticks=yticks, color=color, markershape=markershape, kwargs...)
end

# Finds good x and y limits for a work precision diagram.
function xy_limits(wp)
    times = vcat(map(wp -> wp.times, wp.wps)...)
    errors = vcat(map(wp -> wp.errors, wp.wps)...)
    xlimit = 10 .^ (floor(log10(minimum(errors))), ceil(log10(maximum(errors))))
    ylimit = 10 .^ (floor(log10(minimum(times))), ceil(log10(maximum(times))))
    return xlimit, ylimit
end

# Finds good x and y ticks for a work precision diagram.
function arithmetic_sequences(v1, v2)
    sequences = []
    for n in 2:(v2-v1+1)
        d = (v2 - v1) / (n - 1)
        if d == floor(d)  
            sequence = [v1 + (j-1)*d for j in 1:n]
            push!(sequences, sequence)
        end
    end
    return sequences
end
function get_ticks(limit)
    (limit[1]==-Inf) && return 10.0 .^[limit[1], limit[2]]
    sequences = arithmetic_sequences(limit...)
    selected_seq = findlast(length.(sequences) .< 5)
    if length(sequences[selected_seq]) < 4
        step = (limit[2] - limit[1]) / 6.0
        ticks = [round(Int, limit[1] + i*step) for i in 1:5]
        return 10 .^[limit[1];ticks;limit[2]]
    end
    return 10 .^sequences[selected_seq]
end
```
# Benchmarks
We here run benchmarks for each of the 23 models. 

### Problem 1 (Generalized Rosenbrock function)
```julia
benchmark_problem!("Generalized Rosenbrock function")
```

### Problem 2 (Powell singular function)
```julia
benchmark_problem!("Powell singular function")
```

### Problem 3 (Powell badly scaled function)
```julia
benchmark_problem!("Powell badly scaled function")
```

### Problem 4 (Wood function)
```julia
benchmark_problem!("Wood function")
```

### Problem 5 (Helical valley function)
```julia
benchmark_problem!("Helical valley function")
```

### Problem 6 (Watson function)
```julia
benchmark_problem!("Watson function")
```

### Problem 7 (Chebyquad function)
```julia
benchmark_problem!("Chebyquad function")
```

### Problem 8 (Brown almost linear function)
```julia
benchmark_problem!("Brown almost linear function")
```

### Problem 9 (Discrete boundary value function)
```julia
benchmark_problem!("Discrete boundary value function")
```

### Problem 10 (Discrete integral equation function)
```julia
benchmark_problem!("Discrete integral equation function")
```

### Problem 11 (Trigonometric function)
```julia
benchmark_problem!("Trigonometric function")
```

### Problem 12 (Variably dimensioned function)
```julia
benchmark_problem!("Variably dimensioned function")
```

### Problem 13 (Broyden tridiagonal function)
```julia
benchmark_problem!("Broyden tridiagonal function")
```

### Problem 14 (Broyden banded function)
```julia
benchmark_problem!("Broyden banded function")
```

### Problem 15 (Hammarling 2 by 2 matrix square root problem)
```julia
benchmark_problem!("Hammarling 2 by 2 matrix square root problem")
```

### Problem 16 (Hammarling 3 by 3 matrix square root problem)
```julia
benchmark_problem!("Hammarling 3 by 3 matrix square root problem")
```

### Problem 17 (Dennis and Schnabel 2 by 2 example)
```julia
benchmark_problem!("Dennis and Schnabel 2 by 2 example")
```

### Problem 18 (Sample problem 18)
```julia
benchmark_problem!("Sample problem 18")
```

### Problem 19 (Sample problem 19)
```julia
benchmark_problem!("Sample problem 19")
```

### Problem 20 (Scalar problem f(x) = x(x - 5)^2)
```julia
benchmark_problem!("Scalar problem f(x) = x(x - 5)^2")
```

### Problem 21 (Freudenstein-Roth function)
```julia
benchmark_problem!("Freudenstein-Roth function")
```

### Problem 22 (Boggs function)
```julia
benchmark_problem!("Boggs function")
```

### Problem 23 (Chandrasekhar function)
```julia
benchmark_problem!("Chandrasekhar function")
```

## Summary of sucessful solvers
Finally, we print a summar of which solvers sucesfully solved which problems.

```julia
using PrettyTables
solver_sucesses = [(solver in prob[2]) ? "O" : "X" for prob in solver_tracker, solver in solvers_all];
```
```julia; wrap = false; results = "md2html"
using PrettyTables
io = IOBuffer()
println(io, "```@raw html")
pretty_table(io, solver_sucesses; backend = Val(:html), header = getfield.(solvers_all, :name), row_names = first.(solver_tracker), alignment=:c, vlines=:all)
println(io, "```")
Text(String(take!(io)))
```

# Appendix
```julia, echo = false
using SciMLBenchmarks
SciMLBenchmarks.bench_footer(WEAVE_ARGS[:folder],WEAVE_ARGS[:file])
```

