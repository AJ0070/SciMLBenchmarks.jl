---
title: Linear BVP Benchmarks
author: Qingyu Qu
---

This benchmark compares the runtime and error of BVP solvers, including MIRK solvers, Shooting solvers and FORTRAN BVP solvers on some linear boundary value problems.
The testing BVPs are a set of standard BVP test problems as described [here](https://archimede.uniba.it/~bvpsolvers/testsetbvpsolvers/?page_id=29)

# Setup

Fetch required packages.

```julia
using BoundaryValueDiffEq, SimpleBoundaryValueDiffEq, OrdinaryDiffEq, ODEInterface, DiffEqDevTools, BenchmarkTools,
      BVProblemLibrary, CairoMakie
```

Set up the benchmarked solvers.

```julia
solvers_all = [
    (; pkg = :boundaryvaluediffeq,          type = :mirk,         name = "MIRK3",                solver = Dict(:alg => MIRK3(), :dts=>1.0 ./ 10.0 .^ (1:4))),
    (; pkg = :boundaryvaluediffeq,          type = :mirk,         name = "MIRK4",                solver = Dict(:alg => MIRK4(), :dts=>1.0 ./ 10.0 .^ (1:4))),
    (; pkg = :boundaryvaluediffeq,          type = :mirk,         name = "MIRK5",                solver = Dict(:alg => MIRK5(), :dts=>1.0 ./ 10.0 .^ (1:4))),
    (; pkg = :boundaryvaluediffeq,          type = :mirk,         name = "MIRK6",                solver = Dict(:alg => MIRK6(), :dts=>1.0 ./ 10.0 .^ (1:4))),
    (; pkg = :boundaryvaluediffeq,          type = :firk,         name = "RadauIIa3",            solver = Dict(:alg => RadauIIa3(), :dts=>1.0 ./ 10.0 .^ (1:4))),
    (; pkg = :boundaryvaluediffeq,          type = :firk,         name = "RadauIIa5",            solver = Dict(:alg => RadauIIa5(), :dts=>1.0 ./ 10.0 .^ (1:4))),
    (; pkg = :boundaryvaluediffeq,          type = :firk,         name = "RadauIIa7",            solver = Dict(:alg => RadauIIa7(), :dts=>1.0 ./ 10.0 .^ (1:4))),
    (; pkg = :boundaryvaluediffeq,          type = :firk,         name = "LobattoIIIa3",         solver = Dict(:alg => LobattoIIIa3(), :dts=>1.0 ./ 10.0 .^ (1:4))),
    (; pkg = :boundaryvaluediffeq,          type = :firk,         name = "LobattoIIIa4",         solver = Dict(:alg => LobattoIIIa4(), :dts=>1.0 ./ 10.0 .^ (1:4))),
    (; pkg = :boundaryvaluediffeq,          type = :firk,         name = "LobattoIIIb3",         solver = Dict(:alg => LobattoIIIb3(), :dts=>1.0 ./ 10.0 .^ (1:4))),
    (; pkg = :boundaryvaluediffeq,          type = :firk,         name = "LobattoIIIb4",         solver = Dict(:alg => LobattoIIIb4(), :dts=>1.0 ./ 10.0 .^ (1:4))),
    (; pkg = :boundaryvaluediffeq,          type = :firk,         name = "LobattoIIIc3",         solver = Dict(:alg => LobattoIIIc3(), :dts=>1.0 ./ 10.0 .^ (1:4))),
    (; pkg = :boundaryvaluediffeq,          type = :firk,         name = "LobattoIIIc4",         solver = Dict(:alg => LobattoIIIc4(), :dts=>1.0 ./ 10.0 .^ (1:4))),
    (; pkg = :boundaryvaluediffeq,          type = :shooting,     name = "Single Shooting",      solver = Dict(:alg => Shooting(Tsit5(), NewtonRaphson()), :dts=>1.0 ./ 10.0 .^ (1:4))),
    (; pkg = :boundaryvaluediffeq,          type = :shooting,     name = "Multiple Shooting",    solver = Dict(:alg => MultipleShooting(10, Tsit5()), :dts=>1.0 ./ 10.0 .^ (1:4))),
    (; pkg = :simpleboundaryvaluediffeq,    type = :simplemirk,   name = "SimpleMIRK4",          solver = Dict(:alg => SimpleMIRK4(), :dts=>1.0 ./ 10.0 .^ (1:4))),
    (; pkg = :simpleboundaryvaluediffeq,    type = :simplemirk,   name = "SimpleMIRK5",          solver = Dict(:alg => SimpleMIRK5(), :dts=>1.0 ./ 10.0 .^ (1:4))),
    (; pkg = :simpleboundaryvaluediffeq,    type = :simplemirk,   name = "SimpleMIRK6",          solver = Dict(:alg => SimpleMIRK6(), :dts=>1.0 ./ 10.0 .^ (1:4))),
    (; pkg = :wrapper,                      type = :general,      name = "BVPM2",                solver = Dict(:alg => BVPM2(), :dts=>1.0 ./ 10.0 .^ (1:4))),
    (; pkg = :wrapper,                      type = :general,      name = "COLNEW",               solver = Dict(:alg => COLNEW(), :dts=>1.0 ./ 10.0 .^ (1:4))),
];

solver_tracker = [];
wp_general_tracker = [];
```

Sets tolerances.

```julia
abstols = 1.0 ./ 10.0 .^ (1:3)
reltols = 1.0 ./ 10.0 .^ (1:3);
```

# Benchmarks

We here run the BVP benchmarks for all the BVP solvers in BoundaryValueDiffEq.jl, SimpleBoundaryValueDiffEq.jl and FORTRAN.

Prepares helper function for benchmarking a specific problem.

```julia
function benchmark(prob)
    sol = solve(prob, Shooting(Vern7()), abstol=1e-14, reltol=1e-14)
    testsol = TestSolution(sol)
    wps = WorkPrecisionSet(prob, abstols, reltols, getfield.(solvers_all, :solver); names = getfield.(solvers_all, :name), appxsol = testsol, maxiters=Int(1e4))
    return wps
end

function plot_wpd(wp_set)
    fig = begin
        LINESTYLES = Dict(:boundaryvaluediffeq => :solid, :simpleboundaryvaluediffeq => :dash, :wrapper => :dot)
        ASPECT_RATIO = 0.7
        WIDTH = 1200
        HEIGHT = round(Int, WIDTH * ASPECT_RATIO)
        STROKEWIDTH = 2.5

    colors = cgrad(:seaborn_bright, length(solvers_all); categorical = true)
    cycle = Cycle([:marker], covary = true)
        plot_theme = Theme(Lines = (; cycle), Scatter = (; cycle))

        with_theme(plot_theme) do 
            fig = Figure(; size = (WIDTH, HEIGHT))
            ax = Axis(fig[1, 1], ylabel = L"Time $\mathbf{(s)}$",
                xlabelsize = 22, ylabelsize = 22,
                xlabel = L"Error: $\mathbf{||f(u^\ast)||_\infty}$",
                xscale = log10, yscale = log10, xtickwidth = STROKEWIDTH,
                ytickwidth = STROKEWIDTH, spinewidth = STROKEWIDTH,
                xticklabelsize = 20, yticklabelsize = 20)

            idxs = sortperm(median.(getfield.(wp_set.wps, :times)))

            ls, scs = [], []

            for (i, (wp, solver)) in enumerate(zip(wp_set.wps[idxs], solvers_all[idxs]))
                (; name, times, errors) = wp
                errors = [err.lâˆž for err in errors]
                l = lines!(ax, errors, times; linestyle = LINESTYLES[solver.pkg], label = name,
                    linewidth = 5, color = colors[i])
                sc = scatter!(ax, errors, times; label = name, markersize = 16, strokewidth = 2,
                    color = colors[i])
                push!(ls, l)
                push!(scs, sc)
            end

            xlims!(ax; high=1)
            ylims!(ax; low=5e-6)

            axislegend(ax, [[l, sc] for (l, sc) in zip(ls, scs)],
                [solver.name for solver in solvers_all[idxs]], "BVP Solvers";
                framevisible=true, framewidth = STROKEWIDTH, position = :rb,
                titlesize = 20, labelsize = 16, patchsize = (40.0f0, 20.0f0))

            fig[0, :] = Label(fig, "Linear BVP Benchmark",
                fontsize = 24, tellwidth = false, font = :bold)
            fig
        end
    end
end
```

## Linear boundary value problems

### Linear BVP 1

```julia
prob_1 = BVProblemLibrary.prob_bvp_linear_1
wps = benchmark(prob_1)
plot_wpd(wps)
```

### Linear BVP 2

```julia
prob_2 = BVProblemLibrary.prob_bvp_linear_2
wps = benchmark(prob_2)
plot_wpd(wps)
```

### Linear BVP 3

```julia
prob_3 = BVProblemLibrary.prob_bvp_linear_3
wps = benchmark(prob_3)
plot_wpd(wps)
```

### Linear BVP 4

```julia
prob_4 = BVProblemLibrary.prob_bvp_linear_4
wps = benchmark(prob_4)
plot_wpd(wps)
```

### Linear BVP 5

```julia
prob_5 = BVProblemLibrary.prob_bvp_linear_5
wps = benchmark(prob_5)
plot_wpd(wps)
```

### Linear BVP 6

```julia
prob_6 = BVProblemLibrary.prob_bvp_linear_6
wps = benchmark(prob_6)
plot_wpd(wps)
```

### Linear BVP 7

```julia
prob_7 = BVProblemLibrary.prob_bvp_linear_7
wps = benchmark(prob_7)
plot_wpd(wps)
```

### Linear BVP 8

```julia
prob_8 = BVProblemLibrary.prob_bvp_linear_8
wps = benchmark(prob_8)
plot_wpd(wps)
```

### Linear BVP 9

```julia
prob_9 = BVProblemLibrary.prob_bvp_linear_9
wps = benchmark(prob_9)
plot_wpd(wps)
```

### Linear BVP 10

```julia
prob_10 = BVProblemLibrary.prob_bvp_linear_10
wps = benchmark(prob_10)
plot_wpd(wps)
```

### Linear BVP 11

```julia
prob_11 = BVProblemLibrary.prob_bvp_linear_11
wps = benchmark!(prob_11)
plot_wpd(wps)
```

### Linear BVP 12

```julia
prob_12 = BVProblemLibrary.prob_bvp_linear_12
wps = benchmark(prob_12)
plot_wpd(wps)
```

### Linear BVP 13

```julia
prob_13 = BVProblemLibrary.prob_bvp_linear_13
wps = benchmark(prob_13)
plot_wpd(wps)
```

### Linear BVP 14

```julia
prob_14 = BVProblemLibrary.prob_bvp_linear_14
wps = benchmark(prob_14)
plot_wpd(wps)
```

### Linear BVP 15

```julia
prob_15 = BVProblemLibrary.prob_bvp_linear_15
wps = benchmark(prob_15)
plot_wpd(wps)
```

### Linear BVP 16

```julia
prob_16 = BVProblemLibrary.prob_bvp_linear_16
wps = benchmark(prob_16)
plot_wpd(wps)
```

### Linear BVP 17

```julia
prob_17 = BVProblemLibrary.prob_bvp_linear_17
wps = benchmark(prob_17)
plot_wpd(wps)
```

### Linear BVP 18

```julia
prob_18 = BVProblemLibrary.prob_bvp_linear_18
wps = benchmark(prob_18)
plot_wpd(wps)
```

```julia, echo = false
using SciMLBenchmarks
SciMLBenchmarks.bench_footer(WEAVE_ARGS[:folder],WEAVE_ARGS[:file])
```