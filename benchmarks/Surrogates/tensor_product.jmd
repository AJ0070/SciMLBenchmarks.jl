---
title: Tensor Product Function
author: Mridul Jain, Chris Rackauckas
---

## Tensor Product Function

The tensor product function is defined as:

\[ f(x) =  \prod_{i=1}^{d} \cos(a\pi x_i) \]

where:

- \(d\): Represents the dimensionality of the input vector \(x\).
- \(x_i\): Represents the \(i\)-th component of the input vector.
- \(a\): A constant parameter.

## Let's import Surrogates and Plots

```julia
using Surrogates
using Plots
using Statistics
using SurrogatesPolyChaos
using SurrogatesRandomForest
default()
```

## Define the function

```julia
function tensor_product_function(x)
    a = 0.5
    return prod(cos.(a * Ï€ * x))
end
```

## Sampling parameters for training and test data

```julia
lb = -5.0  # Lower bound of sampling range
ub = 5.0   # Upper bound of sampling range
n = 30     # Number of training points
```

## Generate training and test data

```julia
x_train = sample(n, lb, ub, SobolSample())  # Sample training data points
y_train = tensor_product_function.(x_train)  # Calculate corresponding function values
x_test = sample(1000, lb, ub, RandomSample())  # Sample larger test data set
y_test = tensor_product_function.(x_test)  # Calculate corresponding true function values
```

## Plot training and testing points

```julia
scatter(x_train, y_train, label="Training Points", xlabel="X-axis", ylabel="Y-axis", legend=:topright)
scatter!(x_test, y_test, label="Testing Points")
```

## Benchmarks and footer

```julia
using SciMLBenchmarks
SciMLBenchmarks.bench_footer(WEAVE_ARGS[:folder], WEAVE_ARGS[:file])
```